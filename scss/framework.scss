@import "base.scss";

/* ---------- General ---------- */

* {
	box-sizing: inherit;
	
	&:before, &:after {
		box-sizing: inherit;
	}
}

html {
	box-sizing: border-box;
	position: relative;
	min-height: 100%;
}

body {
	color: $color-black;
	font-family: 'Open Sans', sans-serif, Helmet, Freesans;
	font-size: 16px;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	background-color: $color-grey;
}

select, input, textarea {
	color: $color-black;
}

a {
	color: $color-white;

	&:hover, &:active, &:focus {
		color: $color-primary;
	}
}

:focus {
	outline-color: $color-primary;
	outline-style: dashed;
	outline-width: $micro;
	outline-offset: -$micro;
	transition: none !important;
}

::selection, ::-moz-selection {
	color: $color-white;
	background: $color-black;
	text-shadow: none;
}

strong, b, bold {
	font-weight: 700;
}

$font-sizes: (7, 6, 5, 4, 3, 2);
@for $i from 1 through length($font-sizes) {
	h#{$i} {
		font-size: nth($font-sizes, $i)+em;
		@extend bold;
	}
}

p {
	font-size: 1em;
	line-height: 160%;
}

img {
	max-width: 100%;
}

.clearfix {
	&:before, &:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}

.clickable {
	cursor: pointer;
}

/* ---------- Navigation ---------- */

.nav {
	> {
		a, label, input, div > a {
			cursor: pointer;
			color: $color-black;
			text-decoration: none;
			background-color: transparent;
			@include transition(0.5s);

			&:hover {
				color: $color-white;
				background-color: $color-primary;
				outline-color: $color-primary;
				@include transition(0.1s);
				@include transition(0.25s, outline-offset);
			}
		}
	}

	&-h {
		float: right;

		a, label, input {
			display: inline-block;
			min-width: $huge;
			text-align: center;
			line-height: $huge;
		}

		&-container {
			.signature .signature {
				&-advanced {
					display: inline-block;
					float: left;
					width: 250px;
					height: 100px;
				}
			}
		}
	}

	&-v {
		a, label, input {
			padding-left: $medium;
			display: block;
			text-align: left;
			line-height: $large;
		}

		&-container {
			@extend .top, .left;
			z-index: 10;
			overflow-y: auto;
			display: block;

			.signature {
				@extend .o-10;
				@include transition(0.5s, opacity);

				&:hover, &:focus {
					@extend .o-5;
					@include transition( 0.1s, opacity);
				}
			}

			.signature.signature {
				&-simple img {
					@extend .p-medium-rl;
				}
			}
		}

		&-responsive.toggle-content {
			display: block;
		}

		&-opener, &-opener-responsive {
			@extend .absolute, .top, .left, .toggle-text-menu-close, .btn-cta-black;
			z-index: 11;
		}

		&-opener-responsive {
			display: none;
		}

		> .nav-sub_pages {
			padding-left: $medium;
		}
	}
	&-signature, &-logo {
		width: 100%;
	}
}

/* Nav logo */

.nav-v-container > .nav-signature.signature-advanced {
	display: block;
	@extend .centered;
	width: 250px;
	height: 100px;
	@include transition(0.5s, opacity);

	&:hover,
	&:focus {
		@extend .o-5;
		@include transition(0.1s, opacity);
	}
}

/* ---------- Footer ---------- */

.footer {
	position: absolute;
	height: $large;
	bottom: 0;
	color: $color-white;
	background-color: $color-black;

	> a {
		color: $color-white;
		text-decoration: none;

		&:hover {
			color: $color-primary;
			text-decoration: underline;
		}
	}
}

/* ---------- Logo ---------- */

.logo-advanced,
.signature-advanced {
	background-position: center center;
	background-repeat: no-repeat;
	background-size: 100%;
}

.logo,
.signature {
	max-width: 100%;

	> a {
		display: block;
		width: 100%;
		height: 100%;
	}
}

.logo-advanced {background-image: url("../images/default.png");}
.signature-advanced {background-image: url("../images/default.png");}

/* ---------- Positions ---------- */

$positions: (relative, absolute, fixed, static);
@for $i from 1 through length($positions) {
	.#{nth($positions, $i)} {
		position: nth($positions, $i);
	}
}

/* ---------- Alignments ---------- */

.centered,
.centered-absolute,
.centered-block {
	margin-right: auto;
	margin-left: auto;
}

.centered-absolute {
	left: 0;
	right: 0;
}

.centered-block {display: block;}
.centered-text {text-align: center;}

.centered-vertically {
	position: absolute;
	top: 50%;
	@include transform(translateY, -50%);
}

/* Push from x direction */
$directions: (top, right, bottom, left);
@for $i from 1 through length($directions) {
	.push-#{str-slice(nth($directions, $i), 1, 1)} {
		margin-#{nth($directions, $i)}: auto;
	}
}

/* Set x position to 0 */
@for $i from 1 through length($directions) {
	.#{nth($directions, $i)} {
		#{nth($directions, $i)}: 0;
	}
}

/* ---------- Widths and heights ---------- */

@mixin make_widths_heights {
	$sizes: (huge $xHuge, large $xLarge, medium $xMedium, small $xSmall, tiny $xTiny, micro $xMicro);
	@each $size in $sizes {
		.w-#{nth($size, 1)} {
			width: nth($size, 2);
		}

		.h-#{nth($size, 1)} {
			height: nth($size, 2);
		}
	}
}

@for $i from 1 through 10 {
	.w-#{$i}0 {
		width: $i*10%;
	}
}

@for $i from 1 through 10 {
	.h-#{$i}0 {
		height: $i*10%;
	}
}

@include make_widths_heights;

/* ---------- Margins and paddings ---------- */

@mixin directions($property, $where, $value) {
	@if $where == "t" {
		#{$property}-top : $value;
	} @else if $where == "r" {
		#{$property}-right : $value;
	} @else if $where == "b" {
		#{$property}-bottom : $value;
	} @else if $where == "l" {
		#{$property}-left : $value;
	} @else if $where == "tb" {
		#{$property}-top : $value;
		#{$property}-bottom : $value;
	} @else if $where == "rl" {
		#{$property}-right : $value;
		#{$property}-left : $value;
	} @else if $where == "trbl" {
		#{$property}-top : $value;
		#{$property}-bottom : $value;
		#{$property}-right : $value;
		#{$property}-left : $value;
	}
}

@mixin make_margins_paddings($property, $value:"") {
	$sizes: ("small", "medium", "large");
	$directions: ("t", "r", "b", "l", "tb", "rl", "trbl");

	@for $i_sizes from 0 to length($sizes) {
		@for $i_dirs from 0 to length($directions) {
			.#{str-slice($property, 1, 1)}-#{unquote(nth($sizes, $i_sizes+1))}-#{unquote(nth($directions, $i_dirs+1))} {
				@if nth($sizes, $i_sizes+1) == "small" {
					$value: $small;
					@include directions($property, #{unquote(nth($directions, $i_dirs+1))}, $value);
				} @else if nth($sizes, $i_sizes+1) == "medium" {
					$value: $medium;
					@include directions($property, #{unquote(nth($directions, $i_dirs+1))}, $value);
				} @else if nth($sizes, $i_sizes+1) == "large" {
					$value: $large;
					@include directions($property, #{unquote(nth($directions, $i_dirs+1))}, $value);
				}
			}
		}
	}
}

@include make_margins_paddings(margin);
@include make_margins_paddings(padding);

/* ---------- Opacities ---------- */

@mixin make_opacity {
	@for $i from 0 through 10 {
		.o-#{$i} {
			@if $i > 9 {
				opacity: 1;
				filter: alpha(opacity=100);
			} @else {
				opacity: 0#{unquote(".")}#{$i};
				filter: alpha(opacity=#{$i}0);
			}
		}
	}
}

@include make_opacity;

/* ---------- Colors ---------- */

@mixin make_colors {
	$colors: (primary $color-primary, secondary $color-secondary, white $color-white, grey $color-grey, black $color-black, warning $color-warning, alert $color-alert, success $color-success);
	@each $color in $colors {
		.c-#{nth($color, 1)} {
			color: nth($color, 2);
		}
		
		.c-#{nth($color, 1)}-bg {
			background-color: nth($color, 2);
		}
	}
}

@include make_colors;

/* ---------- Buttons ---------- */

@mixin make_btn($type: normal, $color: $color-black, $color2: $color-black, $color-text: $color-white) {
	cursor: pointer;
	padding: $small $medium;
	border-style: solid;
	border-width: $tiny/2;
	text-decoration: none;

	@if $type == "normal" {
		color: $color;
		border-color: $color;

		&:hover,
		&:focus {
			color: $color-text;
			background-color: $color;
		}	
	}

	@if $type == "cta" {
		color: $color-text;
		border-color: $color;
		background-color: $color;

		&:hover,
		&:focus {
			color: $color-text;
			background-color: $color2;
			border-color: $color2;
		}	
	}
}

/* color buttons normal */
.btn-primary {			@include make_btn(normal, $color-primary);}
.btn-secondary {		@include make_btn(normal, $color-secondary);}
.btn-white {			@include make_btn(normal, $color-white, "", $color-black);}
.btn-black {			@include make_btn(normal, $color-black);}
.btn-grey {				@include make_btn(normal, $color-grey, "", $color-black);}
/* color buttons call-to-action */
.btn-cta-primary {		@include make_btn(cta, $color-primary);}
.btn-cta-secondary {	@include make_btn(cta, $color-secondary);}
.btn-cta-white {		@include make_btn(cta, $color-white);}
.btn-cta-black {		@include make_btn(cta, $color-black);}
.btn-cta-grey {			@include make_btn(cta, $color-grey);}
/* button types normal */
.btn-warning {			@include make_btn(normal, $color-warning);}
.btn-alert {			@include make_btn(normal, $color-alert);}
.btn-success {			@include make_btn(normal, $color-success, "", $color-black);}
/* button types call-to-action */
.btn-cta-warning {		@include make_btn(cta, $color-warning);}
.btn-cta-alert {		@include make_btn(cta, $color-alert);}
.btn-cta-success {		@include make_btn(cta, $color-success);}

/* ---------- Accordiations ---------- */

.toggle {
	visibility: hidden;
	@extend .o-0;
	display: none !important;
	width: 0px;
	height: 0px;
	overflow: hidden;

	&:checked {

		& ~ {
			.toggle-label {
				color: $color-white;
				background-color: $color-black;

				&.toggle-text-open-close, &.toggle-text-menu-close {
					&::after {
						content: "Close";
					}
				}
	
			}

			.toggle-content, .toggle-content-hide {
				display: block !important;

				&.nav-v-responsive {
					@include transform(translateX, 0%);
				}
			}
		}
	}
}

.toggle-content-hide {display: none;}

.toggle-text-open-close::after {content: "Open";}
.toggle-text-menu-close::after {content: "Menu";}

/*
.bear-nav-v {
	@extend .nav-v-container, .nav-v, .nav-v-responsive, .toggle-content, .w-20, .h-100, .c-white-bg, .fixed, .p-large-t;
}
*/

@media screen and (max-width: 1100px) {
	.nav-v-responsive.toggle-content {
		width: 50%;
		@include transform(translateX, -100%);
		@include transition(0.3s, transform);
	}

	.nav-v-opener-responsive {
		display: block;
	}
}

@media screen and (max-width: 480px)  {
	.nav-v-responsive.toggle-content {
		width: 100%;
	}
}