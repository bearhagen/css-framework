@import "base.scss";

/* ---------- General ---------- */
.clearfix:before,
.clearfix:after {
	content: " ";
	display: table;
}

.clearfix:after {
	clear: both;
}

@mixin dynamic_property($property, $where, $value) {
	@if $where == "t" {
		#{$property}-top : $value;
	} @else if $where == "r" {
		#{$property}-right : $value;
	} @else if $where == "b" {
		#{$property}-bottom : $value;
	} @else if $where == "l" {
		#{$property}-left : $value;
	} @else if $where == "tb" {
		#{$property}-top : $value;
		#{$property}-bottom : $value;
	} @else if $where == "rl" {
		#{$property}-right : $value;
		#{$property}-left : $value;
	} @else if $where == "trbl" {
		#{$property}-top : $value;
		#{$property}-bottom : $value;
		#{$property}-right : $value;
		#{$property}-left : $value;
	}
}

$sizes: ("small", "medium", "large");
$directions: ("t", "r", "b", "l", "tb", "rl", "trbl");

@mixin make_properties($property, $value:"") {
	@for $i_sizes from 0 to length($sizes) {
		@for $i_dirs from 0 to length($directions) {
			.#{unquote(nth($sizes, $i_sizes+1))}-#{$property}-#{unquote(nth($directions, $i_dirs+1))} {
				@if nth($sizes, $i_sizes+1) == "small" {
					$value: $large;
					@include dynamic_property($property, #{unquote(nth($directions, $i_dirs+1))}, $value);
				} @else if nth($sizes, $i_sizes+1) == "medium" {
					$value: $medium;
					@include dynamic_property($property, #{unquote(nth($directions, $i_dirs+1))}, $value);
				} @else if nth($sizes, $i_sizes+1) == "large" {
					$value: $small;
					@include dynamic_property($property, #{unquote(nth($directions, $i_dirs+1))}, $value);
				}
			}
		}
	}
}

/* ---------- Margins ---------- */
@include make_properties(margin);

/* ---------- Paddings ---------- */
@include make_properties(padding);

/* ---------- Buttons ---------- */
@mixin make_btn($type: normal, $color: $color-black, $color2: $color-black, $color-text: $color-white) {
	padding: 0.5em 1.5em;
	border-style: solid;
	border-width: 2px;
	text-decoration: none;
	cursor: pointer;

	@if $type == "normal" {
		color: $color;
		border-color: $color;

		&:hover,
		&:focus {
			color: $color-text;
			background-color: $color;
		}	
	}
	@if $type == "cta" {
		border-color: $color;
		background-color: $color;

		&:hover,
		&:focus {
			color: $color;
			background-color: $color2;
			border-color: $color2;
		}	
	}
}

/* color buttons normal */
.btn-primary, a.btn-primary {@include make_btn(normal, $color-primary);}
.btn-primary-light, a.btn-primary-light {@include make_btn(normal, $color-primary-light, "", $color-black);}
.btn-secondary, a.btn-secondary {@include make_btn(normal, $color-secondary);}
.btn-secondary-dark, a.btn-secondary-dark {@include make_btn(normal, $color-secondary-dark);}
.btn-white, a.btn-white {@include make_btn(normal, $color-white, "", $color-black);}
.btn-black, a.btn-black {@include make_btn(normal, $color-black);}
.btn-grey, a.btn-grey {@include make_btn(normal, $color-grey, "", $color-black);}
/* color buttons call-to-action */
.btn-cta-primary, a.btn-cta-primary {@include make_btn(cta, $color-primary);}
.btn-cta-primary-light, a.btn-cta-primary-light {@include make_btn(cta, $color-primary-light);}
.btn-cta-secondary, a.btn-cta-secondary {@include make_btn(cta, $color-secondary);}
.btn-cta-secondary-dark, a.btn-cta-secondary-dark {@include make_btn(cta, $color-secondary-dark);}
.btn-cta-white, a.btn-cta-white {@include make_btn(cta, $color-white);}
.btn-cta-black, a.btn-cta-black {@include make_btn(cta, $color-black);}
.btn-cta-grey, a.btn-cta-grey {@include make_btn(cta, $color-grey);}
/* button types normal */
.btn-warning, a.btn-warning {@include make_btn(normal, $color-warning);}
.btn-alert, a.btn-alert {@include make_btn(normal, $color-alert);}
.btn-success, a.btn-success {@include make_btn(normal, $color-success, "", $color-black);}
/* button types call-to-action */
.btn-cta-warning, a.btn-cta-warning {@include make_btn(cta, $color-warning);}
.btn-cta-alert, a.btn-cta-alert {@include make_btn(cta, $color-alert);}
.btn-cta-success, a.btn-cta-success {@include make_btn(cta, $color-success);}